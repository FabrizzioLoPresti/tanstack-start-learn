/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ReactQueryIndexRouteImport } from './routes/react-query/index'
import { Route as FullCourseIndexRouteImport } from './routes/full-course/index'
import { Route as CoursesIndexRouteImport } from './routes/courses/index'
import { Route as ReactQueryOptimisticUpdatesRouteImport } from './routes/react-query/optimistic-updates'
import { Route as ReactQueryMutationDataRouteImport } from './routes/react-query/mutation-data'
import { Route as ReactQueryFetchDataByParametersRouteImport } from './routes/react-query/fetch-data-by-parameters'
import { Route as ReactQueryFetchDataRouteImport } from './routes/react-query/fetch-data'
import { Route as FullCourseUserRouteImport } from './routes/full-course/user'
import { Route as FullCourseTanstackQueryRouteImport } from './routes/full-course/tanstack-query'
import { Route as FullCourseAboutRouteImport } from './routes/full-course/about'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo/tanstack-query'
import { Route as DemoPrismaRouteImport } from './routes/demo/prisma'
import { Route as DemoOrpcTodoRouteImport } from './routes/demo/orpc-todo'
import { Route as CoursesFetchTanstackQueryMutationZodRouteImport } from './routes/courses/fetch-tanstack-query-mutation-zod'
import { Route as CoursesFetchTanstackQueryRouteImport } from './routes/courses/fetch-tanstack-query'
import { Route as CoursesFetchLoaderDataRouteImport } from './routes/courses/fetch-loader-data'
import { Route as CoursesAboutRouteImport } from './routes/courses/about'
import { Route as ApiUsersRouteImport } from './routes/api/users'
import { Route as ApiSplatRouteImport } from './routes/api.$'
import { Route as CoursesDashboardRouteRouteImport } from './routes/courses/dashboard/route'
import { Route as CoursesDashboardIndexRouteImport } from './routes/courses/dashboard/index'
import { Route as FullCourseUsersUserIdRouteImport } from './routes/full-course/users.$userId'
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo/start.server-funcs'
import { Route as DemoStartApiRequestRouteImport } from './routes/demo/start.api-request'
import { Route as DemoSentryTestingRouteImport } from './routes/demo/sentry.testing'
import { Route as DemoFormSimpleRouteImport } from './routes/demo/form.simple'
import { Route as DemoFormAddressRouteImport } from './routes/demo/form.address'
import { Route as DemoApiTqTodosRouteImport } from './routes/demo/api.tq-todos'
import { Route as DemoApiNamesRouteImport } from './routes/demo/api.names'
import { Route as CoursesFetchLoaderDataParamsUserIdRouteImport } from './routes/courses/fetch-loader-data-params.$userId'
import { Route as CoursesDashboardSettingsRouteImport } from './routes/courses/dashboard/settings'
import { Route as CoursesDashboardLayoutRouteImport } from './routes/courses/dashboard/_layout'
import { Route as ApiRpcSplatRouteImport } from './routes/api.rpc.$'
import { Route as DemoStartSsrIndexRouteImport } from './routes/demo/start.ssr.index'
import { Route as DemoStartSsrSpaModeRouteImport } from './routes/demo/start.ssr.spa-mode'
import { Route as DemoStartSsrFullSsrRouteImport } from './routes/demo/start.ssr.full-ssr'
import { Route as DemoStartSsrDataOnlyRouteImport } from './routes/demo/start.ssr.data-only'
import { Route as CoursesDashboardLayoutTestRouteImport } from './routes/courses/dashboard/_layout.test'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ReactQueryIndexRoute = ReactQueryIndexRouteImport.update({
  id: '/react-query/',
  path: '/react-query/',
  getParentRoute: () => rootRouteImport,
} as any)
const FullCourseIndexRoute = FullCourseIndexRouteImport.update({
  id: '/full-course/',
  path: '/full-course/',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesIndexRoute = CoursesIndexRouteImport.update({
  id: '/courses/',
  path: '/courses/',
  getParentRoute: () => rootRouteImport,
} as any)
const ReactQueryOptimisticUpdatesRoute =
  ReactQueryOptimisticUpdatesRouteImport.update({
    id: '/react-query/optimistic-updates',
    path: '/react-query/optimistic-updates',
    getParentRoute: () => rootRouteImport,
  } as any)
const ReactQueryMutationDataRoute = ReactQueryMutationDataRouteImport.update({
  id: '/react-query/mutation-data',
  path: '/react-query/mutation-data',
  getParentRoute: () => rootRouteImport,
} as any)
const ReactQueryFetchDataByParametersRoute =
  ReactQueryFetchDataByParametersRouteImport.update({
    id: '/react-query/fetch-data-by-parameters',
    path: '/react-query/fetch-data-by-parameters',
    getParentRoute: () => rootRouteImport,
  } as any)
const ReactQueryFetchDataRoute = ReactQueryFetchDataRouteImport.update({
  id: '/react-query/fetch-data',
  path: '/react-query/fetch-data',
  getParentRoute: () => rootRouteImport,
} as any)
const FullCourseUserRoute = FullCourseUserRouteImport.update({
  id: '/full-course/user',
  path: '/full-course/user',
  getParentRoute: () => rootRouteImport,
} as any)
const FullCourseTanstackQueryRoute = FullCourseTanstackQueryRouteImport.update({
  id: '/full-course/tanstack-query',
  path: '/full-course/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const FullCourseAboutRoute = FullCourseAboutRouteImport.update({
  id: '/full-course/about',
  path: '/full-course/about',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoPrismaRoute = DemoPrismaRouteImport.update({
  id: '/demo/prisma',
  path: '/demo/prisma',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoOrpcTodoRoute = DemoOrpcTodoRouteImport.update({
  id: '/demo/orpc-todo',
  path: '/demo/orpc-todo',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesFetchTanstackQueryMutationZodRoute =
  CoursesFetchTanstackQueryMutationZodRouteImport.update({
    id: '/courses/fetch-tanstack-query-mutation-zod',
    path: '/courses/fetch-tanstack-query-mutation-zod',
    getParentRoute: () => rootRouteImport,
  } as any)
const CoursesFetchTanstackQueryRoute =
  CoursesFetchTanstackQueryRouteImport.update({
    id: '/courses/fetch-tanstack-query',
    path: '/courses/fetch-tanstack-query',
    getParentRoute: () => rootRouteImport,
  } as any)
const CoursesFetchLoaderDataRoute = CoursesFetchLoaderDataRouteImport.update({
  id: '/courses/fetch-loader-data',
  path: '/courses/fetch-loader-data',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesAboutRoute = CoursesAboutRouteImport.update({
  id: '/courses/about',
  path: '/courses/about',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiUsersRoute = ApiUsersRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSplatRoute = ApiSplatRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesDashboardRouteRoute = CoursesDashboardRouteRouteImport.update({
  id: '/courses/dashboard',
  path: '/courses/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesDashboardIndexRoute = CoursesDashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CoursesDashboardRouteRoute,
} as any)
const FullCourseUsersUserIdRoute = FullCourseUsersUserIdRouteImport.update({
  id: '/full-course/users/$userId',
  path: '/full-course/users/$userId',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartApiRequestRoute = DemoStartApiRequestRouteImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoSentryTestingRoute = DemoSentryTestingRouteImport.update({
  id: '/demo/sentry/testing',
  path: '/demo/sentry/testing',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormSimpleRoute = DemoFormSimpleRouteImport.update({
  id: '/demo/form/simple',
  path: '/demo/form/simple',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormAddressRoute = DemoFormAddressRouteImport.update({
  id: '/demo/form/address',
  path: '/demo/form/address',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoApiTqTodosRoute = DemoApiTqTodosRouteImport.update({
  id: '/demo/api/tq-todos',
  path: '/demo/api/tq-todos',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoApiNamesRoute = DemoApiNamesRouteImport.update({
  id: '/demo/api/names',
  path: '/demo/api/names',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesFetchLoaderDataParamsUserIdRoute =
  CoursesFetchLoaderDataParamsUserIdRouteImport.update({
    id: '/courses/fetch-loader-data-params/$userId',
    path: '/courses/fetch-loader-data-params/$userId',
    getParentRoute: () => rootRouteImport,
  } as any)
const CoursesDashboardSettingsRoute =
  CoursesDashboardSettingsRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => CoursesDashboardRouteRoute,
  } as any)
const CoursesDashboardLayoutRoute = CoursesDashboardLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => CoursesDashboardRouteRoute,
} as any)
const ApiRpcSplatRoute = ApiRpcSplatRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrIndexRoute = DemoStartSsrIndexRouteImport.update({
  id: '/demo/start/ssr/',
  path: '/demo/start/ssr/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrSpaModeRoute = DemoStartSsrSpaModeRouteImport.update({
  id: '/demo/start/ssr/spa-mode',
  path: '/demo/start/ssr/spa-mode',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrFullSsrRoute = DemoStartSsrFullSsrRouteImport.update({
  id: '/demo/start/ssr/full-ssr',
  path: '/demo/start/ssr/full-ssr',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrDataOnlyRoute = DemoStartSsrDataOnlyRouteImport.update({
  id: '/demo/start/ssr/data-only',
  path: '/demo/start/ssr/data-only',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesDashboardLayoutTestRoute =
  CoursesDashboardLayoutTestRouteImport.update({
    id: '/test',
    path: '/test',
    getParentRoute: () => CoursesDashboardLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/courses/dashboard': typeof CoursesDashboardLayoutRouteWithChildren
  '/api/$': typeof ApiSplatRoute
  '/api/users': typeof ApiUsersRoute
  '/courses/about': typeof CoursesAboutRoute
  '/courses/fetch-loader-data': typeof CoursesFetchLoaderDataRoute
  '/courses/fetch-tanstack-query': typeof CoursesFetchTanstackQueryRoute
  '/courses/fetch-tanstack-query-mutation-zod': typeof CoursesFetchTanstackQueryMutationZodRoute
  '/demo/orpc-todo': typeof DemoOrpcTodoRoute
  '/demo/prisma': typeof DemoPrismaRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/full-course/about': typeof FullCourseAboutRoute
  '/full-course/tanstack-query': typeof FullCourseTanstackQueryRoute
  '/full-course/user': typeof FullCourseUserRoute
  '/react-query/fetch-data': typeof ReactQueryFetchDataRoute
  '/react-query/fetch-data-by-parameters': typeof ReactQueryFetchDataByParametersRoute
  '/react-query/mutation-data': typeof ReactQueryMutationDataRoute
  '/react-query/optimistic-updates': typeof ReactQueryOptimisticUpdatesRoute
  '/courses': typeof CoursesIndexRoute
  '/full-course': typeof FullCourseIndexRoute
  '/react-query': typeof ReactQueryIndexRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/courses/dashboard/settings': typeof CoursesDashboardSettingsRoute
  '/courses/fetch-loader-data-params/$userId': typeof CoursesFetchLoaderDataParamsUserIdRoute
  '/demo/api/names': typeof DemoApiNamesRoute
  '/demo/api/tq-todos': typeof DemoApiTqTodosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/sentry/testing': typeof DemoSentryTestingRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/full-course/users/$userId': typeof FullCourseUsersUserIdRoute
  '/courses/dashboard/': typeof CoursesDashboardIndexRoute
  '/courses/dashboard/test': typeof CoursesDashboardLayoutTestRoute
  '/demo/start/ssr/data-only': typeof DemoStartSsrDataOnlyRoute
  '/demo/start/ssr/full-ssr': typeof DemoStartSsrFullSsrRoute
  '/demo/start/ssr/spa-mode': typeof DemoStartSsrSpaModeRoute
  '/demo/start/ssr': typeof DemoStartSsrIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api/$': typeof ApiSplatRoute
  '/api/users': typeof ApiUsersRoute
  '/courses/about': typeof CoursesAboutRoute
  '/courses/fetch-loader-data': typeof CoursesFetchLoaderDataRoute
  '/courses/fetch-tanstack-query': typeof CoursesFetchTanstackQueryRoute
  '/courses/fetch-tanstack-query-mutation-zod': typeof CoursesFetchTanstackQueryMutationZodRoute
  '/demo/orpc-todo': typeof DemoOrpcTodoRoute
  '/demo/prisma': typeof DemoPrismaRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/full-course/about': typeof FullCourseAboutRoute
  '/full-course/tanstack-query': typeof FullCourseTanstackQueryRoute
  '/full-course/user': typeof FullCourseUserRoute
  '/react-query/fetch-data': typeof ReactQueryFetchDataRoute
  '/react-query/fetch-data-by-parameters': typeof ReactQueryFetchDataByParametersRoute
  '/react-query/mutation-data': typeof ReactQueryMutationDataRoute
  '/react-query/optimistic-updates': typeof ReactQueryOptimisticUpdatesRoute
  '/courses': typeof CoursesIndexRoute
  '/full-course': typeof FullCourseIndexRoute
  '/react-query': typeof ReactQueryIndexRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/courses/dashboard': typeof CoursesDashboardIndexRoute
  '/courses/dashboard/settings': typeof CoursesDashboardSettingsRoute
  '/courses/fetch-loader-data-params/$userId': typeof CoursesFetchLoaderDataParamsUserIdRoute
  '/demo/api/names': typeof DemoApiNamesRoute
  '/demo/api/tq-todos': typeof DemoApiTqTodosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/sentry/testing': typeof DemoSentryTestingRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/full-course/users/$userId': typeof FullCourseUsersUserIdRoute
  '/courses/dashboard/test': typeof CoursesDashboardLayoutTestRoute
  '/demo/start/ssr/data-only': typeof DemoStartSsrDataOnlyRoute
  '/demo/start/ssr/full-ssr': typeof DemoStartSsrFullSsrRoute
  '/demo/start/ssr/spa-mode': typeof DemoStartSsrSpaModeRoute
  '/demo/start/ssr': typeof DemoStartSsrIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/courses/dashboard': typeof CoursesDashboardRouteRouteWithChildren
  '/api/$': typeof ApiSplatRoute
  '/api/users': typeof ApiUsersRoute
  '/courses/about': typeof CoursesAboutRoute
  '/courses/fetch-loader-data': typeof CoursesFetchLoaderDataRoute
  '/courses/fetch-tanstack-query': typeof CoursesFetchTanstackQueryRoute
  '/courses/fetch-tanstack-query-mutation-zod': typeof CoursesFetchTanstackQueryMutationZodRoute
  '/demo/orpc-todo': typeof DemoOrpcTodoRoute
  '/demo/prisma': typeof DemoPrismaRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/full-course/about': typeof FullCourseAboutRoute
  '/full-course/tanstack-query': typeof FullCourseTanstackQueryRoute
  '/full-course/user': typeof FullCourseUserRoute
  '/react-query/fetch-data': typeof ReactQueryFetchDataRoute
  '/react-query/fetch-data-by-parameters': typeof ReactQueryFetchDataByParametersRoute
  '/react-query/mutation-data': typeof ReactQueryMutationDataRoute
  '/react-query/optimistic-updates': typeof ReactQueryOptimisticUpdatesRoute
  '/courses/': typeof CoursesIndexRoute
  '/full-course/': typeof FullCourseIndexRoute
  '/react-query/': typeof ReactQueryIndexRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/courses/dashboard/_layout': typeof CoursesDashboardLayoutRouteWithChildren
  '/courses/dashboard/settings': typeof CoursesDashboardSettingsRoute
  '/courses/fetch-loader-data-params/$userId': typeof CoursesFetchLoaderDataParamsUserIdRoute
  '/demo/api/names': typeof DemoApiNamesRoute
  '/demo/api/tq-todos': typeof DemoApiTqTodosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/sentry/testing': typeof DemoSentryTestingRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/full-course/users/$userId': typeof FullCourseUsersUserIdRoute
  '/courses/dashboard/': typeof CoursesDashboardIndexRoute
  '/courses/dashboard/_layout/test': typeof CoursesDashboardLayoutTestRoute
  '/demo/start/ssr/data-only': typeof DemoStartSsrDataOnlyRoute
  '/demo/start/ssr/full-ssr': typeof DemoStartSsrFullSsrRoute
  '/demo/start/ssr/spa-mode': typeof DemoStartSsrSpaModeRoute
  '/demo/start/ssr/': typeof DemoStartSsrIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/courses/dashboard'
    | '/api/$'
    | '/api/users'
    | '/courses/about'
    | '/courses/fetch-loader-data'
    | '/courses/fetch-tanstack-query'
    | '/courses/fetch-tanstack-query-mutation-zod'
    | '/demo/orpc-todo'
    | '/demo/prisma'
    | '/demo/tanstack-query'
    | '/full-course/about'
    | '/full-course/tanstack-query'
    | '/full-course/user'
    | '/react-query/fetch-data'
    | '/react-query/fetch-data-by-parameters'
    | '/react-query/mutation-data'
    | '/react-query/optimistic-updates'
    | '/courses'
    | '/full-course'
    | '/react-query'
    | '/api/rpc/$'
    | '/courses/dashboard/settings'
    | '/courses/fetch-loader-data-params/$userId'
    | '/demo/api/names'
    | '/demo/api/tq-todos'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/sentry/testing'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/full-course/users/$userId'
    | '/courses/dashboard/'
    | '/courses/dashboard/test'
    | '/demo/start/ssr/data-only'
    | '/demo/start/ssr/full-ssr'
    | '/demo/start/ssr/spa-mode'
    | '/demo/start/ssr'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api/$'
    | '/api/users'
    | '/courses/about'
    | '/courses/fetch-loader-data'
    | '/courses/fetch-tanstack-query'
    | '/courses/fetch-tanstack-query-mutation-zod'
    | '/demo/orpc-todo'
    | '/demo/prisma'
    | '/demo/tanstack-query'
    | '/full-course/about'
    | '/full-course/tanstack-query'
    | '/full-course/user'
    | '/react-query/fetch-data'
    | '/react-query/fetch-data-by-parameters'
    | '/react-query/mutation-data'
    | '/react-query/optimistic-updates'
    | '/courses'
    | '/full-course'
    | '/react-query'
    | '/api/rpc/$'
    | '/courses/dashboard'
    | '/courses/dashboard/settings'
    | '/courses/fetch-loader-data-params/$userId'
    | '/demo/api/names'
    | '/demo/api/tq-todos'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/sentry/testing'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/full-course/users/$userId'
    | '/courses/dashboard/test'
    | '/demo/start/ssr/data-only'
    | '/demo/start/ssr/full-ssr'
    | '/demo/start/ssr/spa-mode'
    | '/demo/start/ssr'
  id:
    | '__root__'
    | '/'
    | '/courses/dashboard'
    | '/api/$'
    | '/api/users'
    | '/courses/about'
    | '/courses/fetch-loader-data'
    | '/courses/fetch-tanstack-query'
    | '/courses/fetch-tanstack-query-mutation-zod'
    | '/demo/orpc-todo'
    | '/demo/prisma'
    | '/demo/tanstack-query'
    | '/full-course/about'
    | '/full-course/tanstack-query'
    | '/full-course/user'
    | '/react-query/fetch-data'
    | '/react-query/fetch-data-by-parameters'
    | '/react-query/mutation-data'
    | '/react-query/optimistic-updates'
    | '/courses/'
    | '/full-course/'
    | '/react-query/'
    | '/api/rpc/$'
    | '/courses/dashboard/_layout'
    | '/courses/dashboard/settings'
    | '/courses/fetch-loader-data-params/$userId'
    | '/demo/api/names'
    | '/demo/api/tq-todos'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/sentry/testing'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/full-course/users/$userId'
    | '/courses/dashboard/'
    | '/courses/dashboard/_layout/test'
    | '/demo/start/ssr/data-only'
    | '/demo/start/ssr/full-ssr'
    | '/demo/start/ssr/spa-mode'
    | '/demo/start/ssr/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CoursesDashboardRouteRoute: typeof CoursesDashboardRouteRouteWithChildren
  ApiSplatRoute: typeof ApiSplatRoute
  ApiUsersRoute: typeof ApiUsersRoute
  CoursesAboutRoute: typeof CoursesAboutRoute
  CoursesFetchLoaderDataRoute: typeof CoursesFetchLoaderDataRoute
  CoursesFetchTanstackQueryRoute: typeof CoursesFetchTanstackQueryRoute
  CoursesFetchTanstackQueryMutationZodRoute: typeof CoursesFetchTanstackQueryMutationZodRoute
  DemoOrpcTodoRoute: typeof DemoOrpcTodoRoute
  DemoPrismaRoute: typeof DemoPrismaRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  FullCourseAboutRoute: typeof FullCourseAboutRoute
  FullCourseTanstackQueryRoute: typeof FullCourseTanstackQueryRoute
  FullCourseUserRoute: typeof FullCourseUserRoute
  ReactQueryFetchDataRoute: typeof ReactQueryFetchDataRoute
  ReactQueryFetchDataByParametersRoute: typeof ReactQueryFetchDataByParametersRoute
  ReactQueryMutationDataRoute: typeof ReactQueryMutationDataRoute
  ReactQueryOptimisticUpdatesRoute: typeof ReactQueryOptimisticUpdatesRoute
  CoursesIndexRoute: typeof CoursesIndexRoute
  FullCourseIndexRoute: typeof FullCourseIndexRoute
  ReactQueryIndexRoute: typeof ReactQueryIndexRoute
  ApiRpcSplatRoute: typeof ApiRpcSplatRoute
  CoursesFetchLoaderDataParamsUserIdRoute: typeof CoursesFetchLoaderDataParamsUserIdRoute
  DemoApiNamesRoute: typeof DemoApiNamesRoute
  DemoApiTqTodosRoute: typeof DemoApiTqTodosRoute
  DemoFormAddressRoute: typeof DemoFormAddressRoute
  DemoFormSimpleRoute: typeof DemoFormSimpleRoute
  DemoSentryTestingRoute: typeof DemoSentryTestingRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
  FullCourseUsersUserIdRoute: typeof FullCourseUsersUserIdRoute
  DemoStartSsrDataOnlyRoute: typeof DemoStartSsrDataOnlyRoute
  DemoStartSsrFullSsrRoute: typeof DemoStartSsrFullSsrRoute
  DemoStartSsrSpaModeRoute: typeof DemoStartSsrSpaModeRoute
  DemoStartSsrIndexRoute: typeof DemoStartSsrIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/react-query/': {
      id: '/react-query/'
      path: '/react-query'
      fullPath: '/react-query'
      preLoaderRoute: typeof ReactQueryIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/full-course/': {
      id: '/full-course/'
      path: '/full-course'
      fullPath: '/full-course'
      preLoaderRoute: typeof FullCourseIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/': {
      id: '/courses/'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof CoursesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/react-query/optimistic-updates': {
      id: '/react-query/optimistic-updates'
      path: '/react-query/optimistic-updates'
      fullPath: '/react-query/optimistic-updates'
      preLoaderRoute: typeof ReactQueryOptimisticUpdatesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/react-query/mutation-data': {
      id: '/react-query/mutation-data'
      path: '/react-query/mutation-data'
      fullPath: '/react-query/mutation-data'
      preLoaderRoute: typeof ReactQueryMutationDataRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/react-query/fetch-data-by-parameters': {
      id: '/react-query/fetch-data-by-parameters'
      path: '/react-query/fetch-data-by-parameters'
      fullPath: '/react-query/fetch-data-by-parameters'
      preLoaderRoute: typeof ReactQueryFetchDataByParametersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/react-query/fetch-data': {
      id: '/react-query/fetch-data'
      path: '/react-query/fetch-data'
      fullPath: '/react-query/fetch-data'
      preLoaderRoute: typeof ReactQueryFetchDataRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/full-course/user': {
      id: '/full-course/user'
      path: '/full-course/user'
      fullPath: '/full-course/user'
      preLoaderRoute: typeof FullCourseUserRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/full-course/tanstack-query': {
      id: '/full-course/tanstack-query'
      path: '/full-course/tanstack-query'
      fullPath: '/full-course/tanstack-query'
      preLoaderRoute: typeof FullCourseTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/full-course/about': {
      id: '/full-course/about'
      path: '/full-course/about'
      fullPath: '/full-course/about'
      preLoaderRoute: typeof FullCourseAboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/prisma': {
      id: '/demo/prisma'
      path: '/demo/prisma'
      fullPath: '/demo/prisma'
      preLoaderRoute: typeof DemoPrismaRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/orpc-todo': {
      id: '/demo/orpc-todo'
      path: '/demo/orpc-todo'
      fullPath: '/demo/orpc-todo'
      preLoaderRoute: typeof DemoOrpcTodoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/fetch-tanstack-query-mutation-zod': {
      id: '/courses/fetch-tanstack-query-mutation-zod'
      path: '/courses/fetch-tanstack-query-mutation-zod'
      fullPath: '/courses/fetch-tanstack-query-mutation-zod'
      preLoaderRoute: typeof CoursesFetchTanstackQueryMutationZodRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/fetch-tanstack-query': {
      id: '/courses/fetch-tanstack-query'
      path: '/courses/fetch-tanstack-query'
      fullPath: '/courses/fetch-tanstack-query'
      preLoaderRoute: typeof CoursesFetchTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/fetch-loader-data': {
      id: '/courses/fetch-loader-data'
      path: '/courses/fetch-loader-data'
      fullPath: '/courses/fetch-loader-data'
      preLoaderRoute: typeof CoursesFetchLoaderDataRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/about': {
      id: '/courses/about'
      path: '/courses/about'
      fullPath: '/courses/about'
      preLoaderRoute: typeof CoursesAboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/dashboard': {
      id: '/courses/dashboard'
      path: '/courses/dashboard'
      fullPath: '/courses/dashboard'
      preLoaderRoute: typeof CoursesDashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/dashboard/': {
      id: '/courses/dashboard/'
      path: '/'
      fullPath: '/courses/dashboard/'
      preLoaderRoute: typeof CoursesDashboardIndexRouteImport
      parentRoute: typeof CoursesDashboardRouteRoute
    }
    '/full-course/users/$userId': {
      id: '/full-course/users/$userId'
      path: '/full-course/users/$userId'
      fullPath: '/full-course/users/$userId'
      preLoaderRoute: typeof FullCourseUsersUserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/sentry/testing': {
      id: '/demo/sentry/testing'
      path: '/demo/sentry/testing'
      fullPath: '/demo/sentry/testing'
      preLoaderRoute: typeof DemoSentryTestingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/simple': {
      id: '/demo/form/simple'
      path: '/demo/form/simple'
      fullPath: '/demo/form/simple'
      preLoaderRoute: typeof DemoFormSimpleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/address': {
      id: '/demo/form/address'
      path: '/demo/form/address'
      fullPath: '/demo/form/address'
      preLoaderRoute: typeof DemoFormAddressRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/api/tq-todos': {
      id: '/demo/api/tq-todos'
      path: '/demo/api/tq-todos'
      fullPath: '/demo/api/tq-todos'
      preLoaderRoute: typeof DemoApiTqTodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/api/names': {
      id: '/demo/api/names'
      path: '/demo/api/names'
      fullPath: '/demo/api/names'
      preLoaderRoute: typeof DemoApiNamesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/fetch-loader-data-params/$userId': {
      id: '/courses/fetch-loader-data-params/$userId'
      path: '/courses/fetch-loader-data-params/$userId'
      fullPath: '/courses/fetch-loader-data-params/$userId'
      preLoaderRoute: typeof CoursesFetchLoaderDataParamsUserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/dashboard/settings': {
      id: '/courses/dashboard/settings'
      path: '/settings'
      fullPath: '/courses/dashboard/settings'
      preLoaderRoute: typeof CoursesDashboardSettingsRouteImport
      parentRoute: typeof CoursesDashboardRouteRoute
    }
    '/courses/dashboard/_layout': {
      id: '/courses/dashboard/_layout'
      path: ''
      fullPath: '/courses/dashboard'
      preLoaderRoute: typeof CoursesDashboardLayoutRouteImport
      parentRoute: typeof CoursesDashboardRouteRoute
    }
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/': {
      id: '/demo/start/ssr/'
      path: '/demo/start/ssr'
      fullPath: '/demo/start/ssr'
      preLoaderRoute: typeof DemoStartSsrIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/spa-mode': {
      id: '/demo/start/ssr/spa-mode'
      path: '/demo/start/ssr/spa-mode'
      fullPath: '/demo/start/ssr/spa-mode'
      preLoaderRoute: typeof DemoStartSsrSpaModeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/full-ssr': {
      id: '/demo/start/ssr/full-ssr'
      path: '/demo/start/ssr/full-ssr'
      fullPath: '/demo/start/ssr/full-ssr'
      preLoaderRoute: typeof DemoStartSsrFullSsrRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/data-only': {
      id: '/demo/start/ssr/data-only'
      path: '/demo/start/ssr/data-only'
      fullPath: '/demo/start/ssr/data-only'
      preLoaderRoute: typeof DemoStartSsrDataOnlyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/dashboard/_layout/test': {
      id: '/courses/dashboard/_layout/test'
      path: '/test'
      fullPath: '/courses/dashboard/test'
      preLoaderRoute: typeof CoursesDashboardLayoutTestRouteImport
      parentRoute: typeof CoursesDashboardLayoutRoute
    }
  }
}

interface CoursesDashboardLayoutRouteChildren {
  CoursesDashboardLayoutTestRoute: typeof CoursesDashboardLayoutTestRoute
}

const CoursesDashboardLayoutRouteChildren: CoursesDashboardLayoutRouteChildren =
  {
    CoursesDashboardLayoutTestRoute: CoursesDashboardLayoutTestRoute,
  }

const CoursesDashboardLayoutRouteWithChildren =
  CoursesDashboardLayoutRoute._addFileChildren(
    CoursesDashboardLayoutRouteChildren,
  )

interface CoursesDashboardRouteRouteChildren {
  CoursesDashboardLayoutRoute: typeof CoursesDashboardLayoutRouteWithChildren
  CoursesDashboardSettingsRoute: typeof CoursesDashboardSettingsRoute
  CoursesDashboardIndexRoute: typeof CoursesDashboardIndexRoute
}

const CoursesDashboardRouteRouteChildren: CoursesDashboardRouteRouteChildren = {
  CoursesDashboardLayoutRoute: CoursesDashboardLayoutRouteWithChildren,
  CoursesDashboardSettingsRoute: CoursesDashboardSettingsRoute,
  CoursesDashboardIndexRoute: CoursesDashboardIndexRoute,
}

const CoursesDashboardRouteRouteWithChildren =
  CoursesDashboardRouteRoute._addFileChildren(
    CoursesDashboardRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CoursesDashboardRouteRoute: CoursesDashboardRouteRouteWithChildren,
  ApiSplatRoute: ApiSplatRoute,
  ApiUsersRoute: ApiUsersRoute,
  CoursesAboutRoute: CoursesAboutRoute,
  CoursesFetchLoaderDataRoute: CoursesFetchLoaderDataRoute,
  CoursesFetchTanstackQueryRoute: CoursesFetchTanstackQueryRoute,
  CoursesFetchTanstackQueryMutationZodRoute:
    CoursesFetchTanstackQueryMutationZodRoute,
  DemoOrpcTodoRoute: DemoOrpcTodoRoute,
  DemoPrismaRoute: DemoPrismaRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  FullCourseAboutRoute: FullCourseAboutRoute,
  FullCourseTanstackQueryRoute: FullCourseTanstackQueryRoute,
  FullCourseUserRoute: FullCourseUserRoute,
  ReactQueryFetchDataRoute: ReactQueryFetchDataRoute,
  ReactQueryFetchDataByParametersRoute: ReactQueryFetchDataByParametersRoute,
  ReactQueryMutationDataRoute: ReactQueryMutationDataRoute,
  ReactQueryOptimisticUpdatesRoute: ReactQueryOptimisticUpdatesRoute,
  CoursesIndexRoute: CoursesIndexRoute,
  FullCourseIndexRoute: FullCourseIndexRoute,
  ReactQueryIndexRoute: ReactQueryIndexRoute,
  ApiRpcSplatRoute: ApiRpcSplatRoute,
  CoursesFetchLoaderDataParamsUserIdRoute:
    CoursesFetchLoaderDataParamsUserIdRoute,
  DemoApiNamesRoute: DemoApiNamesRoute,
  DemoApiTqTodosRoute: DemoApiTqTodosRoute,
  DemoFormAddressRoute: DemoFormAddressRoute,
  DemoFormSimpleRoute: DemoFormSimpleRoute,
  DemoSentryTestingRoute: DemoSentryTestingRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
  FullCourseUsersUserIdRoute: FullCourseUsersUserIdRoute,
  DemoStartSsrDataOnlyRoute: DemoStartSsrDataOnlyRoute,
  DemoStartSsrFullSsrRoute: DemoStartSsrFullSsrRoute,
  DemoStartSsrSpaModeRoute: DemoStartSsrSpaModeRoute,
  DemoStartSsrIndexRoute: DemoStartSsrIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
